#!/usr/bin/env bash
set -euo pipefail

CURRENT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

source "$CURRENT_PATH/../lib/utils.sh"

export LOG_NAMESPACE="[SCRIPTS][ALLOWLIST]"
source_as "$CURRENT_PATH/../lib/log.sh" "LOGGER"

init() {
  LOGGER section "ALLOWLIST: Setup DNS-based filtering with ipset"

  if [[ -f "$CURRENT_PATH/../.env" ]]; then
    source "$CURRENT_PATH/../.env"
  else
    LOGGER error "Missing .env file â€“ cannot proceed"
    exit 1
  fi

  PROJECT_ROOT="$CURRENT_PATH/.."
  WHITELIST_FILE="$PROJECT_ROOT/config/whitelist.txt"
  ALLOW_ALL_IPS_FILE="$PROJECT_ROOT/config/allow_all_ips.txt"
  DNSMASQ_CONF="/etc/dnsmasq.d/whitelist.conf"
  IPSET_RESTORE_SERVICE="/etc/systemd/system/ipset-restore.service"

  LOGGER step "Installing required packages"
  sudo apt install -y ipset dnsmasq iptables

  LOGGER step "Cleaning existing ipsets and iptables rules"
  # Remove iptables rules
  sudo iptables -D FORWARD -m set --match-set allow_all src -j ACCEPT 2>/dev/null || true
  sudo iptables -D FORWARD -m set --match-set whitelist dst -j ACCEPT 2>/dev/null || true
  sudo iptables -D FORWARD -j REJECT 2>/dev/null || true

  # Flush and destroy ipsets only if they exist
  if sudo ipset list allow_all &>/dev/null; then
    sudo ipset flush allow_all || true
    sudo ipset destroy allow_all || true
  fi

  if sudo ipset list whitelist &>/dev/null; then
    sudo ipset flush whitelist || true
    sudo ipset destroy whitelist || true
  fi

  LOGGER step "Creating ipsets"
  sudo ipset create whitelist hash:ip
  sudo ipset create allow_all hash:ip

  LOGGER step "Generating dnsmasq whitelist config"
  echo "# Generated by 08-setup-allowlist.sh" | sudo tee "$DNSMASQ_CONF" > /dev/null
  while IFS= read -r domain; do
    echo "ipset=/$domain/whitelist" | sudo tee -a "$DNSMASQ_CONF" > /dev/null
  done < "$WHITELIST_FILE"

  LOGGER step "Restarting dnsmasq"
  sudo systemctl restart dnsmasq

  LOGGER step "Populating allow_all ipset"
  while IFS= read -r ip; do
    sudo ipset add allow_all "$ip" || true
  done < "$ALLOW_ALL_IPS_FILE"

  LOGGER step "Setting iptables rules"
  sudo iptables -C FORWARD -m set --match-set allow_all src -j ACCEPT 2>/dev/null || \
    sudo iptables -A FORWARD -m set --match-set allow_all src -j ACCEPT

  sudo iptables -C FORWARD -m set --match-set whitelist dst -j ACCEPT 2>/dev/null || \
    sudo iptables -A FORWARD -m set --match-set whitelist dst -j ACCEPT

  sudo iptables -C FORWARD -j REJECT 2>/dev/null || \
    sudo iptables -A FORWARD -j REJECT

  LOGGER step "Saving ipsets"
  sudo ipset save | sudo tee /etc/ipset.conf > /dev/null

  LOGGER step "Installing ipset-restore systemd service"
  sudo cp "$PROJECT_ROOT/config/ipset-restore.service" "$IPSET_RESTORE_SERVICE"
  sudo systemctl daemon-reload
  sudo systemctl enable ipset-restore.service

  LOGGER step "Restoring ipsets immediately"

  sudo systemctl start ipset-restore.service || echo "Note: sets already exist, skipping start."

  LOGGER ok "Allowlist filtering set up successfully"
}