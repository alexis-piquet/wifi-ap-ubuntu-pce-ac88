#!/usr/bin/env bash
set -euo pipefail

CURRENT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$CURRENT_PATH/.."

source "$ROOT_DIR/lib/utils.sh"
source_as "$ROOT_DIR/lib/logger.sh" "LOGGER"

_load_env() {
  local env_file="$ROOT_DIR/.env"
  if [[ ! -f "$env_file" ]]; then
    LOGGER error "Missing .env file – run 010_env.sh first"
    exit 1
  fi
  # shellcheck source=/dev/null
  source "$env_file"

  # Required runtime network mode & interfaces
  : "${NET_MODE:=router}"                    # router | bridge
  : "${ETHERNET_IF:?Set ETHERNET_IF in .env}"
  : "${WIRELESS_IF:?Set WIRELESS_IF in .env}"

  # Allowlist inputs (defaults + ensure files exist even if empty)
  : "${ALLOWLIST_DIR:=$ROOT_DIR/config/allowlist}"
  : "${WHITELIST_FILE:=$ALLOWLIST_DIR/whitelist.txt}"
  : "${ALLOW_ALL_IPS_FILE:=$ALLOWLIST_DIR/allow_all_ips.txt}"

  sudo install -d -m 0755 "$(dirname "$WHITELIST_FILE")"
  [[ -f "$WHITELIST_FILE" ]] || { LOGGER warn "Creating empty $WHITELIST_FILE"; : | sudo tee "$WHITELIST_FILE" >/dev/null; }
  [[ -f "$ALLOW_ALL_IPS_FILE" ]] || { LOGGER warn "Creating empty $ALLOW_ALL_IPS_FILE"; : | sudo tee "$ALLOW_ALL_IPS_FILE" >/dev/null; }

  # Outputs / system resources
  : "${DNSMASQ_D:=/etc/dnsmasq.d}"
  : "${DNSMASQ_WHITELIST:=$DNSMASQ_D/whitelist.conf}"
  : "${IPSET_SERVICE_SRC:=$ROOT_DIR/config/services/ipset-restore.service}"
  : "${IPSET_SERVICE_DST:=/etc/systemd/system/ipset-restore.service}"

  if [[ "$NET_MODE" != "router" ]]; then
    LOGGER info "NET_MODE=$NET_MODE → allowlist not required (skipping)."
    exit 0
  fi

  # Friendly notes if files are empty
  if [[ ! -s "$WHITELIST_FILE" ]]; then
    LOGGER info "whitelist.txt is empty – no domain→ipset mapping will be created (that’s fine)."
  fi
  if [[ ! -s "$ALLOW_ALL_IPS_FILE" ]]; then
    LOGGER info "allow_all_ips.txt is empty – 'allow_all' set stays empty (that’s fine)."
  fi
}

_prepare_ipsets() {
  LOGGER step "Creating ipsets (idempotent)"
  sudo ipset create whitelist hash:ip -exist
  sudo ipset create allow_all hash:ip -exist

  LOGGER step "Populating 'allow_all' ipset from $ALLOW_ALL_IPS_FILE"
  if [[ -s "$ALLOW_ALL_IPS_FILE" ]]; then
    # Read non-empty, non-comment lines
    while IFS= read -r ip; do
      [[ -z "${ip// }" || "$ip" == \#* ]] && continue
      sudo ipset add allow_all "$ip" 2>/dev/null || true
    done < "$ALLOW_ALL_IPS_FILE"
  else
    LOGGER info "No entries to add to 'allow_all' (file empty)."
  fi

  LOGGER step "Saving ipsets to /etc/ipset.conf"
  sudo ipset save | sudo tee /etc/ipset.conf >/dev/null
}

_write_dnsmasq_whitelist() {
  LOGGER step "Generating dnsmasq whitelist mapping → $DNSMASQ_WHITELIST"
  sudo install -d -m 0755 "$DNSMASQ_D"
  {
    echo "# Generated by 070_allowlist.sh"
    echo "# Lines like:  ipset=/example.com/whitelist"
  } | sudo tee "$DNSMASQ_WHITELIST" >/dev/null

  if [[ -s "$WHITELIST_FILE" ]]; then
    while IFS= read -r domain; do
      [[ -z "${domain// }" || "$domain" == \#* ]] && continue
      printf "ipset=/%s/whitelist\n" "$domain"
    done < "$WHITELIST_FILE" | sudo tee -a "$DNSMASQ_WHITELIST" >/dev/null
  else
    LOGGER info "whitelist.txt is empty – writing only header to $DNSMASQ_WHITELIST."
  fi

  LOGGER step "Validating dnsmasq configuration (includes conf-dir)"
  if ! sudo dnsmasq --test --conf-file=/etc/dnsmasq.conf --conf-dir="$DNSMASQ_D"; then
    LOGGER error "dnsmasq --test failed"
    exit 1
  fi

  LOGGER step "Restarting dnsmasq to apply whitelist mapping"
  sudo systemctl restart dnsmasq
  LOGGER ok "dnsmasq reloaded with whitelist mapping"
}

_program_iptables_chain() {
  LOGGER step "Programming iptables allowlist chain (WIFI_ALLOWLIST)"

  # Remove permissive WiFi→Eth ACCEPT if it exists (from 060_nat)
  while sudo iptables -C FORWARD -i "$WIRELESS_IF" -o "$ETHERNET_IF" -j ACCEPT 2>/dev/null; do
    sudo iptables -D FORWARD -i "$WIRELESS_IF" -o "$ETHERNET_IF" -j ACCEPT || true
  done

  # Create/flush dedicated chain
  sudo iptables -N WIFI_ALLOWLIST 2>/dev/null || true
  sudo iptables -F WIFI_ALLOWLIST

  # Policy: allow sources in 'allow_all', allow destinations in 'whitelist', else reject
  sudo iptables -A WIFI_ALLOWLIST -m set --match-set allow_all src -j ACCEPT
  sudo iptables -A WIFI_ALLOWLIST -m set --match-set whitelist dst -j ACCEPT
  sudo iptables -A WIFI_ALLOWLIST -j REJECT

  # Ensure WiFi→Eth hits WIFI_ALLOWLIST at top
  sudo iptables -C FORWARD -i "$WIRELESS_IF" -o "$ETHERNET_IF" -j WIFI_ALLOWLIST 2>/dev/null \
    || sudo iptables -I FORWARD 1 -i "$WIRELESS_IF" -o "$ETHERNET_IF" -j WIFI_ALLOWLIST

  # Preserve/ensure ESTABLISHED,RELATED flow
  sudo iptables -C FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT 2>/dev/null \
    || sudo iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

  LOGGER ok "iptables allowlist in place (WiFi→Eth filtered)"
}

_install_ipset_restore_unit() {
  if [[ ! -f "$IPSET_SERVICE_SRC" ]]; then
    LOGGER info "No ipset-restore.service provided (skip)"
    return 0
  fi

  LOGGER step "Installing ipset-restore systemd unit"
  sudo install -m 0644 -T "$IPSET_SERVICE_SRC" "$IPSET_SERVICE_DST"
  sudo systemctl daemon-reload
  sudo systemctl enable ipset-restore.service
  sudo systemctl start ipset-restore.service || LOGGER info "Sets already exist, skipping start."
}

init_allowlist() {
  LOGGER info "ALLOWLIST: DNS-based filtering with ipset (router mode)"
  _load_env
  _prepare_ipsets
  _write_dnsmasq_whitelist
  _program_iptables_chain
  _install_ipset_restore_unit
  LOGGER ok "Allowlist filtering set up successfully"
}
