#!/usr/bin/env bash
set -euo pipefail

CURRENT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$CURRENT_PATH/.."

source "$ROOT_DIR/lib/utils.sh"
source_as "$ROOT_DIR/lib/logger.sh" "LOGGER"

_load_env() {
  local env_file="$ROOT_DIR/.env"
  if [[ ! -f "$env_file" ]]; then
    LOGGER error "Missing .env file – run 010_env.sh first"
    exit 1
  fi
  # shellcheck source=/dev/null
  source "$env_file"

  : "${NET_MODE:=router}"                 # router | bridge
  : "${ETHERNET_IF:?Set ETHERNET_IF in .env}"
  : "${WIRELESS_IF:?Set WIRELESS_IF in .env}"

  WHITELIST_FILE="$ROOT_DIR/config/allowlist/whitelist.txt"
  ALLOW_ALL_IPS_FILE="$ROOT_DIR/config/allowlist/allow_all_ips.txt"
  DNSMASQ_WHITELIST="/etc/dnsmasq.d/whitelist.conf"
  IPSET_SERVICE_DST="/etc/systemd/system/ipset-restore.service"
  IPSET_SERVICE_SRC="$ROOT_DIR/config/services/ipset-restore.service"

  if [[ "$NET_MODE" != "router" ]]; then
    LOGGER info "NET_MODE=$NET_MODE → allowlist not required (skipping)."
    exit 0
  fi

  if [[ ! -f "$WHITELIST_FILE" ]]; then
    LOGGER error "Missing $WHITELIST_FILE"
    exit 1
  fi
  if [[ ! -f "$ALLOW_ALL_IPS_FILE" ]]; then
    LOGGER warn "Missing $ALLOW_ALL_IPS_FILE (continuing without static allow-all IPs)"
  fi
}

_prepare_ipsets() {
  LOGGER step "Creating ipsets (idempotent)"
  sudo ipset create whitelist hash:ip -exist
  sudo ipset create allow_all hash:ip -exist

  LOGGER step "Populating allow_all ipset"
  if [[ -f "$ALLOW_ALL_IPS_FILE" ]]; then
    while IFS= read -r ip; do
      [[ -z "$ip" || "$ip" =~ ^# ]] && continue
      sudo ipset add allow_all "$ip" 2>/dev/null || true
    done < "$ALLOW_ALL_IPS_FILE"
  fi

  LOGGER step "Saving ipsets to /etc/ipset.conf"
  sudo ipset save | sudo tee /etc/ipset.conf >/dev/null
}

_write_dnsmasq_whitelist() {
  LOGGER step "Generating dnsmasq whitelist mapping → $DNSMASQ_WHITELIST"
  sudo install -d -m 0755 /etc/dnsmasq.d
  echo "# Generated by 070_allowlist.sh" | sudo tee "$DNSMASQ_WHITELIST" >/dev/null

  while IFS= read -r domain; do
    [[ -z "$domain" || "$domain" =~ ^# ]] && continue
    echo "ipset=/$domain/whitelist" | sudo tee -a "$DNSMASQ_WHITELIST" >/dev/null
  done < "$WHITELIST_FILE"

  # Test + restart dnsmasq (router mode)
  LOGGER step "Testing dnsmasq configuration"
  if ! sudo dnsmasq --test --conf-file=/etc/dnsmasq.conf --conf-dir=/etc/dnsmasq.d; then
    LOGGER error "dnsmasq --test failed"
    exit 1
  fi
  LOGGER step "Restarting dnsmasq"
  sudo systemctl restart dnsmasq
  LOGGER ok "dnsmasq reloaded with whitelist mapping"
}

_program_iptables_chain() {
  LOGGER step "Programming iptables allowlist chain (WIFI_ALLOWLIST)"

  # Delete the permissive rule set by 060_nat (if present)
  while sudo iptables -C FORWARD -i "$WIRELESS_IF" -o "$ETHERNET_IF" -j ACCEPT 2>/dev/null; do
    sudo iptables -D FORWARD -i "$WIRELESS_IF" -o "$ETHERNET_IF" -j ACCEPT || true
  done

  # Create/empty the dedicated channel
  sudo iptables -N WIFI_ALLOWLIST 2>/dev/null || true
  sudo iptables -F WIFI_ALLOWLIST

  # Policy: allow_all (src) → ACCEPT; whitelist (dst) → ACCEPT; otherwise REJECT
  sudo iptables -A WIFI_ALLOWLIST -m set --match-set allow_all src -j ACCEPT
  sudo iptables -A WIFI_ALLOWLIST -m set --match-set whitelist dst -j ACCEPT
  sudo iptables -A WIFI_ALLOWLIST -j REJECT

  # Ensure WiFi→Eth traffic goes through the chain (insert at the top)
  sudo iptables -C FORWARD -i "$WIRELESS_IF" -o "$ETHERNET_IF" -j WIFI_ALLOWLIST 2>/dev/null \
    || sudo iptables -I FORWARD 1 -i "$WIRELESS_IF" -o "$ETHERNET_IF" -j WIFI_ALLOWLIST

  # Keep the global ESTABLISHED,RELATED rule (set in 060_nat), otherwise add it
  sudo iptables -C FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT 2>/dev/null \
    || sudo iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

  LOGGER ok "iptables allowlist in place (WiFi→Eth filtered)"
}

_install_ipset_restore_unit() {
  [[ -f "$IPSET_SERVICE_SRC" ]] || { LOGGER info "No ipset-restore.service provided (skip)"; return 0; }

  LOGGER step "Installing ipset-restore systemd unit"
  sudo install -m 0644 -T "$IPSET_SERVICE_SRC" "$IPSET_SERVICE_DST"
  sudo systemctl daemon-reload
  sudo systemctl enable ipset-restore.service
  sudo systemctl start ipset-restore.service || LOGGER info "Sets already exist, skipping start."
}

init_allowlist() {
  LOGGER info "ALLOWLIST: DNS-based filtering with ipset (router mode)"
  _load_env
  _prepare_ipsets
  _write_dnsmasq_whitelist
  _program_iptables_chain
  _install_ipset_restore_unit
  LOGGER ok "Allowlist filtering set up successfully"
}
