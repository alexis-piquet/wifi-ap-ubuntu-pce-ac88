#!/usr/bin/env bash
set -euo pipefail

CURRENT_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$CURRENT_PATH/.."

source "$ROOT_DIR/lib/utils.sh"
source_as "$ROOT_DIR/lib/logger.sh" "LOGGER"

# -- helpers ------------------------------------------------------------------

_load_existing_env() {
  local env_file="$ROOT_DIR/.env"
  if [[ -f "$env_file" ]]; then
    # shellcheck source=/dev/null
    source "$env_file"
    LOGGER info "Loaded existing .env"
  fi
}

_set_default() {
  # _set_default VAR VALUE  â†’ sets VAR only if empty/unset
  local var="$1"; shift
  local val="$*"
  if [[ -z "${!var:-}" ]]; then
    printf -v "$var" "%s" "$val"
  fi
}

_detect_ethernet() {
  # pick first 'en*' or 'eth*' which is not loopback and not wireless
  ip -o link | awk -F': ' '{print $2}' \
    | grep -E '^(en|eth)' \
    | while read -r dev; do
        [[ -d "/sys/class/net/$dev/wireless" ]] && continue
        [[ "$dev" == "lo" ]] && continue
        echo "$dev"; break
      done
}

_detect_wireless() {
  # prefer iw; fallback to ip wl*
  if command -v iw >/dev/null 2>&1; then
    iw dev 2>/dev/null | awk '$1=="Interface"{print $2; exit}'
  else
    ip -o link | awk -F': ' '{print $2}' | grep -E '^wl' | head -n1
  fi
}

_write_env_file() {
  local env_tmp="$ROOT_DIR/.env.tmp"
  local env_out="$ROOT_DIR/.env"
  umask 022

  cat >"$env_tmp" <<EOF
# Generated by scripts/010_env.sh on $(date -Iseconds)
# You can edit this file; re-running init will keep your changes.

export NET_MODE=${NET_MODE}
export NET_BACKEND=${NET_BACKEND}

export ETHERNET_IF=${ETHERNET_IF}
export WIRELESS_IF=${WIRELESS_IF}
export BRIDGE_IF=${BRIDGE_IF}

export AP_CIDR=${AP_CIDR}
export AP_IP=${AP_IP}
export AP_NET=${AP_NET}
export DHCP_START=${DHCP_START}
export DHCP_END=${DHCP_END}

# hostapd defaults (edit as you wish)
export WIRELESS_SSID=${WIRELESS_SSID}
export WIRELESS_PASSWORD=${WIRELESS_PASSWORD}
export WIRELESS_COUNTRY=${WIRELESS_COUNTRY}
export CHANNEL=${CHANNEL}
EOF

  mv "$env_tmp" "$env_out"
  LOGGER ok "Environment written to .env"
}

# -- main ---------------------------------------------------------------------

init_env() {
  LOGGER info "Initializing environment (detect interfaces, set defaults, write .env)"

  _load_existing_env

  # Defaults (can be overridden in existing .env)
  _set_default NET_MODE     "router"      # router | bridge
  _set_default NET_BACKEND  "netplan"     # netplan | nm

  # Detect interfaces only if not supplied
  if [[ -z "${ETHERNET_IF:-}" ]]; then
    ETHERNET_IF="$(_detect_ethernet || true)"
  fi
  if [[ -z "${WIRELESS_IF:-}" ]]; then
    WIRELESS_IF="$(_detect_wireless || true)"
  fi
  _set_default BRIDGE_IF    "br0"

  if [[ -z "${ETHERNET_IF:-}" ]]; then
    LOGGER error "Ethernet interface not found. Please set ETHERNET_IF in .env."
    ip -o link || true
    exit 1
  fi
  if [[ -z "${WIRELESS_IF:-}" ]]; then
    LOGGER warn "Wi-Fi interface not found (yet). This may be normal before firmware install."
  fi

  LOGGER info "Ethernet: ${ETHERNET_IF}"
  LOGGER info "Wireless: ${WIRELESS_IF:-<none>}"
  LOGGER info "Bridge:   ${BRIDGE_IF} (used only if NET_MODE=bridge)"

  # AP addressing (router mode defaults)
  _set_default AP_CIDR     "10.0.0.1/24"
  # derive AP_IP from AP_CIDR if not set
  _set_default AP_IP       "${AP_CIDR%/*}"
  # derive AP_NET (first 3 octets)
  AP_NET="${AP_NET:-$(echo "$AP_IP" | awk -F. '{printf "%d.%d.%d",$1,$2,$3}')}"
  _set_default DHCP_START  "${AP_NET}.10"
  _set_default DHCP_END    "${AP_NET}.200"

  # hostapd sane defaults
  _set_default WIRELESS_SSID        "wifi-ap"
  _set_default WIRELESS_PASSWORD    "ChangeMe123!"
  _set_default WIRELESS_COUNTRY     "FR"
  _set_default CHANNEL              "36"

  # Quick firmware hint (best-effort)
  if [[ -n "${WIRELESS_IF:-}" && ! -f /lib/firmware/brcm/brcmfmac4366c-pcie.bin ]]; then
    LOGGER warn "Firmware brcmfmac4366c-pcie.bin not found in /lib/firmware/brcm (020_firmware.sh will handle it)."
  fi

  _write_env_file
}
